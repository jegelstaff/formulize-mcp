{
  "dxt_version": "0.1",
  "name": "formulize-mcp",
  "display_name": "Formulize",
  "version": "1.3.1",
  "description": "A local MCP server for connecting to Formulize, the open source data management platform.",
  "long_description": "Formulize lets people organize their data and customize the workflows around their data. Many Formulize users are not developers, they are power users who understand how their systems should work, and they can use Formulize to configure their database applications, instead of programming them. With this MCP server, people can connect AI assistants to their Formulize system, have conversations about their data, and get their AI assistant to help in configuring Formulize. Through MCP, people will be able to simply outline their use cases and business processes, and then the AI assistant can use tools in Formulize to create the applications they have imagined. People can also have AI assistants validate, summarize, and help manage their data, and even add data to the database based on the context and prompts provided by users.",
  "author": {
    "name": "Julian Egelstaff and Claude (Sonnet 4 and Opus 4)",
    "email": "julian@formulize.org",
    "url": "https://github.com/jegelstaff"
  },
  "homepage": "https://formulize.org/",
  "documentation": "https://formulize.org/ai",
  "support": "https://github.com/jegelstaff/formulize-mcp/issues",
  "icon": "icon.png",
  "server": {
    "type": "node",
    "entry_point": "dist/formulize-mcp.js",
    "mcp_config": {
      "command": "node",
      "args": [
        "${__dirname}/dist/formulize-mcp.js"
      ],
      "env": {
        "FORMULIZE_URL": "${user_config.FORMULIZE_URL}",
        "FORMULIZE_API_KEY": "${user_config.FORMULIZE_API_KEY}",
        "FORMULIZE_SERVER_NAME": "${user_config.FORMULIZE_SERVER_NAME}",
        "FORMULIZE_DEBUG": "${user_config.FORMULIZE_DEBUG}",
        "FORMULIZE_TIMEOUT": "${user_config.FORMULIZE_TIMEOUT}"
      }
    }
  },
  "tools": [
		{
			"name": "list_forms",
			"description": "List all forms in this Formulize instance"
		},
		{
			"name": "list_applications",
			"description": "List all the applications and the forms that are part of each one."
		},
		{
			"name": "list_form_connections",
			"description": "List all the connections between forms, which can explain how forms are related to one another. Connection are based pairs of elements, one in each form, that have matching values. Entries in the forms are connected when they have the same value in the paired elements, or when one element is 'linked' to the other, in which case the values in the linked element will be entry_ids in the other form (foreign keys)."
		},
		{
			"name": "list_screens",
			"description": "List all the screens for all forms."
		},
		{
			"name": "list_users",
			"description": "List all the users in the system."
		},
		{
			"name": "get_form_details",
			"description": "Get detailed information about a specific form, including its elements, screens, and connections to other forms. You can get a list of all the forms and their IDs with the list_forms tool."
		},
		{
			"name": "get_screen_details",
			"description": "Get detailed information about a specific screen. Lookup screens by their ID number, also known as 'sid'"
		},
		{
			"name": "create_entry",
			"description": "Create a new entry in a Formulize form. Returns success status and new entry ID. Formulize may automatically add default values for required elements, if they have default values defined. Do not be concerned about required elements unless this tool returns an error saying that required elements are missing."
		},
		{
			"name": "update_entry",
			"description": "Update an existing entry in a Formulize form."
		},
		{
			"name": "get_entries_from_form",
			"description": "Retrieve entries from a form with optional filtering, sorting, and pagination. Supports both simple entry ID lookup and complex multi-condition filtering. Returns data in a structured format suitable for analysis or display."
		},
		{
			"name": "prepare_database_values_for_human_readability",
			"description": "Convert database values to human-readable format. Essential for linked elements (foreign keys), checkboxes, and select lists where raw database values are IDs or codes rather than display text."
		},
		{
			"name": "test_connection",
			"description": "Test the MCP server connection and database access"
		},
		{
			"name": "cache_stats",
			"description": "The local MCP server caches information to reduce network traffic and the load on the Formulize system. Use this tool to see the status of the cache."
		},
		{
			"name": "cache_refresh",
			"description": "The local MCP server caches information to reduce network traffic and the load on the Formulize system. Use this tool to clear the cache."
		},
		{
			"name": "query_the_database_directly",
			"description": "Query the database with a SELECT statement. The database is MariaDB/MySQL and queries are written in SQL. If you don't know the database schema for the form, use the get_form_details tool to look up the form's database table name, and the field names are the element handles."
		},
		{
			"name": "read_system_activity_log",
			"description": "This Formulize system logs all activity. This tool will read up to the last 1000 lines from the activity log and return them as a array of JSON objects. There are several keys available in the objects, including microtime (a timestamp), user_id (the user who was active), request_id (which identifies log entries that were part of the same http request), session_id (which connects each request in a user's session), formulize_event (which is a short descriptor of the activity), as well as form_id, screen_id, and entry_id."
		}
  ],
  "prompts": [
		{
			"name": "check_the_activity_logs",
			"description": "Ask the AI for a report on recent user activity",
			"arguments": ["users","forms"]
		},
		{
			"name": "generate_a_report_about_a_form",
			"description": "Ask the AI to write a report about the data in a form.",
			"arguments": ["form","report_type","focus"]
		},
		{
			"name": "look_up_data",
			"description": "Ask the AI to look up data in the system.",
			"arguments": ["form","searches","limit","sortDetails","elements"]
		}
  ],
  "tools_generated": true,
  "prompts_generated": true,
  "user_config": {
    "FORMULIZE_URL": {
      "type": "string",
      "title": "URL for the Formulize system",
      "description": "This is the URL for the Formulize system, ie: https://yoursite.com or https://yoursite.com/formulize/",
      "required": true,
      "sensitive": false
    },
    "FORMULIZE_API_KEY": {
      "type": "string",
      "title": "Your API key for your Formulize system",
      "description": "All data in Formulize is permission controlled. To identify yourself to the remote Formulize MCP server, you need to use an API key from your Formulize system. This can be generated on the Admin side, on the Manage API Keys page.",
      "required": true,
      "sensitive": true
    },
    "FORMULIZE_DEBUG": {
      "type": "boolean",
      "title": "Turn on debug mode",
      "description": "With debug mode on, there are a lot of messages that get output from the server, so you can see better what's going on. Also, caching is turned off in the server when debug mode is on.",
      "required": false,
      "sensitive": false,
      "default": false
    },
    "FORMULIZE_TIMEOUT": {
      "type": "number",
      "title": "The timeout limit, in milliseconds",
      "description": "The amount of time the server will wait for a response from your Formulize system.",
      "required": false,
      "sensitive": false,
      "default": 30000,
      "min": 0
    }
  },
  "keywords": [
    "database",
    "Formulize",
    "nocode",
    "lowcode"
  ],
  "license": "GPL-2.0",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jegelstaff/formulize-mcp.git"
  }
}
